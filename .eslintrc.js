module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    tsconfigRootDir: __dirname,
    sourceType: 'module',
    ecmaVersion: 'latest',
  },
  plugins: ['@typescript-eslint/eslint-plugin', 'import'],
  extends: ['plugin:@typescript-eslint/recommended', 'plugin:prettier/recommended'],
  root: true,
  env: {
    node: true,
    jest: true,
    es2021: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/explicit-function-return-type': 'warn',
    '@typescript-eslint/explicit-module-boundary-types': 'error',
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'default',
        format: ['strictCamelCase'],
        leadingUnderscore: 'forbid',
      },
      { selector: 'variable', format: ['strictCamelCase', 'UPPER_CASE'] },
      { selector: 'objectLiteralProperty', format: null },
      { selector: 'enumMember', format: ['UPPER_CASE'] },
      { selector: 'typeParameter', format: ['StrictPascalCase'] },
      { selector: 'typeAlias', format: ['StrictPascalCase'] },
      { selector: 'class', format: ['StrictPascalCase'] },
      { selector: 'enum', format: ['StrictPascalCase'] },
      { selector: 'property', format: ['strictCamelCase', 'snake_case'] },
      {
        selector: 'interface',
        format: ['StrictPascalCase'],
        custom: { regex: '^I[A-Z]', match: false },
      },
    ],
    'no-console': 'warn',
    'max-lines-per-function': ['error', 25],
    'max-depth': ['error', 2],
    'max-params': ['error', 4],
    'max-classes-per-file': ['error', 1],
    'no-var': 'error',
    'prefer-const': 'error',
    'no-else-return': 'error',
    'no-lonely-if': 'error',
    'no-multi-assign': 'error',
    'no-nested-ternary': 'warn',
    'no-unneeded-ternary': 'error',
    'no-useless-concat': 'error',
    'no-return-await': 'error',
    'prefer-destructuring': 'error',
    'prefer-object-spread': 'error',
    'prefer-template': 'error',
    'require-await': 'error',
    'no-await-in-loop': 'error',
    'no-return-assign': 'error',
    'import/order': [
      'error',
      {
        groups: ['external', 'builtin', 'internal', 'type', 'index', 'sibling', 'parent'],
        'newlines-between': 'always',
        alphabetize: { order: 'asc', caseInsensitive: true },
      },
    ],
  },
};
